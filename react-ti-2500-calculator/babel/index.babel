const projectName = 'javascript-calculator';
localStorage.setItem('example_project', 'Javascript Calculator');

const buttonsArray = [[
  {keyFace: 'CE',                     keyID: 'ced',       keyClass: 'operation-keys'},
  {keyFace: String.fromCharCode(247), keyID: 'divide',    keyClass: 'operation-keys'},
  {keyFace: String.fromCharCode(215), keyID: 'multiply',  keyClass: 'operation-keys'}],
  [
  {keyFace: '7',                      keyID: 'seven',     keyClass: 'number-keys'},
  {keyFace: '8',                      keyID: 'eight',     keyClass: 'number-keys'},
  {keyFace: '9',                      keyID: 'nine',      keyClass: 'number-keys'},
  {keyFace: 'C',                      keyID: 'clear',     keyClass: 'operation-keys'}],
  [
  {keyFace: '4',                      keyID: 'four',      keyClass: 'number-keys'},
  {keyFace: '5',                      keyID: 'five',      keyClass: 'number-keys'},
  {keyFace: '6',                      keyID: 'six',       keyClass: 'number-keys'},
  {keyFace: '-',                      keyID: 'subtract',  keyClass: 'operation-keys'}],
  [
  {keyFace: '1',                      keyID: 'one',       keyClass: 'number-keys'},
  {keyFace: '2',                      keyID: 'two',       keyClass: 'number-keys'},
  {keyFace: '3',                      keyID: 'three',     keyClass: 'number-keys'},
  {keyFace: '+',                      keyID: 'add',       keyClass: 'operation-keys'}],
  [
  {keyFace: '0',                      keyID: 'zero',      keyClass: 'number-keys'},
  {keyFace: '.',                      keyID: 'decimal',   keyClass: 'number-keys'},
  {keyFace: '=',                      keyID: 'equals',    keyClass: 'equal-key'}]
];

class Button extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
    }
    this.componentDidMount = this.componentDidMount.bind(this);
    this.componentWillUnmount = this.componentWillUnmount.bind(this);
    this.handleKeyPress = this.handleKeyPress.bind(this);
    this.keyPress = this.keyPress.bind(this);
    this.evalOperation = this.evalOperation.bind(this);
  }
  componentDidMount() {
    document.addEventListener('keydown', this.handleKeyPress);
  }
  componentWillUnmount() {
    document.removeEventListener('keydown', this.handleKeyPress);
  }
  handleKeyPress(e) {
    if (String.fromCharCode(e.keyCode) === this.props.buttonObj.keyFace) {
      this.keyPress();
    }
  }
    
  keyPress(e) {
    console.log('keyPress: ');
    console.log(this.props);
    if (this.props.buttonObj.keyClass === 'number-keys') {
      if (this.props.currentState.operand == null) {
        this.props.currentState.operand = this.props.currentState.value;
        this.props.currentState.value = '';
      }
      if (this.props.currentState.value == 0) {
        this.props.currentState.value = '';
      }
      if ((this.props.buttonObj.keyFace != '.' || 
          !this.props.currentState.value.includes('.')) &&
         this.props.currentState.value.length < 15) {
        this.props.currentState.value += this.props.buttonObj.keyFace;
      }
      
    } else {
      console.log(this.props.buttonObj.keyID);
      
      switch (this.props.buttonObj.keyID) {
        case 'clear':
          this.props.currentState.value = 0;
          this.props.currentState.operand = 0;
          this.props.currentState.operator = '';
          break;
        case 'ced':
          this.props.currentState.value = 0;
          break;
        case 'add':
          this.evalOperation('+');
          console.log(this.props.currentState);
          break;
        case 'subtract':
          this.evalOperation('-');
          break;
        case 'multiply':
          this.evalOperation('*');
          break;
        case 'divide':
          this.evalOperation('/');
          break;
        case 'equals':
          this.evalOperation('');
          break;
      }
    }
    console.log('updateDisplay: ');
    console.log(this.props.currentState);
    this.props.updateDisplay(
      this.props.currentState.operand,
      this.props.currentState.operator,
      this.props.currentState.value);
  }
  
  evalOperation(operator) {
    if (this.props.currentState.operator != '' && this.props.currentState.operand != null) {
      this.props.currentState.value = 
        eval(this.props.currentState.operand +
             this.props.currentState.operator + 
             this.props.currentState.value);
    }
    this.props.currentState.operand = null;
    this.props.currentState.operator = operator;
    
    return;
  }
  
  
  render() {
    return (
      <div id={this.props.buttonObj.keyID}
        className={this.props.buttonObj.keyClass} 
        onClick={this.keyPress}>
        {this.props.buttonObj.keyFace}
      </div>
    )
  }
};

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      operand: 0,
      operator: '',
      value: 0
    }
    this.updateState = this.updateState.bind(this);
    this.buttonCell = this.buttonCell.bind(this);
    this.buttonsTable = this.buttonsTable.bind(this);
  }
  
  updateState(operand, operator, value) {
    // console.log(operand);
    // console.log(operator);
    // console.log(value);
    this.setState({
      operand: operand,
      operator: operator,
      value: value
    });
  }
  
  buttonCell(buttonObject, index) {
    return (
      <td>
        <Button 
          buttonObj={buttonObject}
          updateDisplay={this.updateState} 
          currentState = {this.state} />
      </td>
    );
  }
  
  buttonsTable() {
    return (
      <div id="key-pad">
        <table>
          <tr>
            {buttonsArray[0].map(this.buttonCell)}
          </tr>
          <tr>
            {buttonsArray[1].map(this.buttonCell)}
          </tr>
          <tr>
            {buttonsArray[2].map(this.buttonCell)}
          </tr>
          <tr>
            {buttonsArray[3].map(this.buttonCell)}
          </tr>
        </table>
        <table>
          <tr>
            {buttonsArray[4].map(this.buttonCell)}
          </tr>
        </table>
      </div>
    )
  }
  
  render() {
    return (
      <div>
        <div id="calcInfo">
          <h1>TI 2500 "Datamath" Calculator</h1>
          <p>The TI 2500 "Datamath" was Texas Instruments first calculator, first announced in April 1972, with a suggested retail price (SRP) of $149.95. Adjusted for inflation, this is equivalent to $900 in 2018. The SRP was reduced to $119.95 ($720 in 2018 dollars) by September 21, 1972, the date of its formal introduction.</p>
          <p>In this exercise I have attempted to reproduce the experience of how early calculators behaved when they could only display numbers and not any information about the keys pressed to perform math operations. </p>
        </div>
        <div id="calculator" className="inner-container">
          <div id="display">
            {this.state.value}
          </div>
          <div id="logoStrip">
            <span id="TIlogo">
            </span>
            <span id="datamath">
              Datamath
            </span>
          </div>
          <this.buttonsTable />
        </div>
      </div>
    )
  }
};

ReactDOM.render(
  <App />,
  document.getElementById('app')
);